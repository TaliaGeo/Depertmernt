name: CI/CD Pipeline

on:
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    name: Build & Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: '21'

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-m2-

      - name: Build with Maven
        run: mvn clean package --batch-mode

      - name: Run tests
        run: mvn test --batch-mode

      - name: Static analysis (Checkstyle)
        run: mvn checkstyle:check

  docker-build-push:
    name: Build & Push Docker Image to DockerHub
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: |
            docker.io/${{ secrets.DOCKER_USERNAME }}/department_service:${{ github.sha }}
            docker.io/${{ secrets.DOCKER_USERNAME }}/department_service:latest

  deploy:
    name: Deploy to ECS
    needs: docker-build-push
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token:     ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region:            ${{ secrets.AWS_REGION }}

      - name : Determine environment
        id: env
        run: |
          if [ "$EVENT_NAME" = "pull_request" ]; then
            REF="$PR_BASE_REF"
          else
            REF="${GITHUB_REF##*/}"
          fi

          case "$REF" in
            main)      echo "ENV=production"  >> $GITHUB_ENV ;;
            staging)   echo "ENV=pre-prod"    >> $GITHUB_ENV ;;
            develop)   echo "ENV=development" >> $GITHUB_ENV ;;
            *)         echo "ENV=development" >> $GITHUB_ENV ;;
          esac

      - name: Deploy to the right ECS service
        run: |
          CLUSTER_NAME="department-cluster"
          SERVICE_NAME="department-task-service"
          echo "Deploying to cluster=$CLUSTER_NAME service=$SERVICE_NAME"
          aws ecs update-service \
            --cluster  "$CLUSTER_NAME" \
            --service  "$SERVICE_NAME" \
            --force-new-deployment

            
